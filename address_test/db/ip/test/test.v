// test.v

// Generated using ACDS version 21.1 842

`timescale 1 ps / 1 ps
module test (
		input  wire [7:0]  addr_master_0_data_in_condiut,        //        addr_master_0_data_in.condiut
		output wire [7:0]  addr_master_0_dbg_data_in_conduit,    //    addr_master_0_dbg_data_in.conduit
		output wire        addr_master_0_dbg_input_en_conduit,   //   addr_master_0_dbg_input_en.conduit
		output wire        addr_master_0_dbg_output_en_conduit,  //  addr_master_0_dbg_output_en.conduit
		output wire [7:0]  addr_master_0_dbg_write_data_conduit, // addr_master_0_dbg_write_data.conduit
		output wire [31:0] addr_master_0_dbg_write_to_conduit,   //   addr_master_0_dbg_write_to.conduit
		input  wire        addr_master_0_input_en_conduit,       //       addr_master_0_input_en.conduit
		input  wire        addr_master_0_output_en_conduit,      //      addr_master_0_output_en.conduit
		input  wire [31:0] addr_master_0_write_to_conduit,       //       addr_master_0_write_to.conduit
		input  wire        clk_clk,                              //                          clk.clk
		input  wire        reset_reset_n                         //                        reset.reset_n
	);

	wire         addr_master_0_m0_waitrequest;                    // mm_interconnect_0:addr_master_0_m0_waitrequest -> addr_master_0:avm_m0_waitrequest
	wire  [31:0] addr_master_0_m0_address;                        // addr_master_0:avm_m0_address -> mm_interconnect_0:addr_master_0_m0_address
	wire         addr_master_0_m0_write;                          // addr_master_0:avm_m0_write -> mm_interconnect_0:addr_master_0_m0_write
	wire   [7:0] addr_master_0_m0_writedata;                      // addr_master_0:avm_m0_writedata -> mm_interconnect_0:addr_master_0_m0_writedata
	wire         mm_interconnect_0_mm_slave_bfm_0_s0_waitrequest; // mm_slave_bfm_0:avs_waitrequest -> mm_interconnect_0:mm_slave_bfm_0_s0_waitrequest
	wire  [15:0] mm_interconnect_0_mm_slave_bfm_0_s0_address;     // mm_interconnect_0:mm_slave_bfm_0_s0_address -> mm_slave_bfm_0:avs_address
	wire   [3:0] mm_interconnect_0_mm_slave_bfm_0_s0_byteenable;  // mm_interconnect_0:mm_slave_bfm_0_s0_byteenable -> mm_slave_bfm_0:avs_byteenable
	wire         mm_interconnect_0_mm_slave_bfm_0_s0_write;       // mm_interconnect_0:mm_slave_bfm_0_s0_write -> mm_slave_bfm_0:avs_write
	wire  [31:0] mm_interconnect_0_mm_slave_bfm_0_s0_writedata;   // mm_interconnect_0:mm_slave_bfm_0_s0_writedata -> mm_slave_bfm_0:avs_writedata
	wire         rst_controller_reset_out_reset;                  // rst_controller:reset_out -> [addr_master_0:rst, mm_interconnect_0:addr_master_0_reset_sink_reset_bridge_in_reset_reset, mm_slave_bfm_0:reset]

	addr_master addr_master_0 (
		.clk                (clk_clk),                              //          clock.clk
		.avm_m0_waitrequest (addr_master_0_m0_waitrequest),         //             m0.waitrequest
		.avm_m0_write       (addr_master_0_m0_write),               //               .write
		.avm_m0_writedata   (addr_master_0_m0_writedata),           //               .writedata
		.avm_m0_address     (addr_master_0_m0_address),             //               .address
		.rst                (rst_controller_reset_out_reset),       //     reset_sink.reset
		.data_in            (addr_master_0_data_in_condiut),        //        data_in.condiut
		.input_en           (addr_master_0_input_en_conduit),       //       input_en.conduit
		.write_to           (addr_master_0_write_to_conduit),       //       write_to.conduit
		.output_en          (addr_master_0_output_en_conduit),      //      output_en.conduit
		.dbg_data_in        (addr_master_0_dbg_data_in_conduit),    //    dbg_data_in.conduit
		.dbg_input_en       (addr_master_0_dbg_input_en_conduit),   //   dbg_input_en.conduit
		.dbg_write_to       (addr_master_0_dbg_write_to_conduit),   //   dbg_write_to.conduit
		.dbg_output_en      (addr_master_0_dbg_output_en_conduit),  //  dbg_output_en.conduit
		.dbg_write_data     (addr_master_0_dbg_write_data_conduit)  // dbg_write_data.conduit
	);

	altera_avalon_mm_slave_bfm #(
		.AV_ADDRESS_W               (16),
		.AV_SYMBOL_W                (8),
		.AV_NUMSYMBOLS              (4),
		.AV_BURSTCOUNT_W            (3),
		.AV_READRESPONSE_W          (8),
		.AV_WRITERESPONSE_W         (8),
		.USE_READ                   (0),
		.USE_WRITE                  (1),
		.USE_ADDRESS                (1),
		.USE_BYTE_ENABLE            (1),
		.USE_BURSTCOUNT             (0),
		.USE_READ_DATA              (0),
		.USE_READ_DATA_VALID        (0),
		.USE_WRITE_DATA             (1),
		.USE_BEGIN_TRANSFER         (0),
		.USE_BEGIN_BURST_TRANSFER   (0),
		.USE_WAIT_REQUEST           (1),
		.USE_TRANSACTIONID          (0),
		.USE_WRITERESPONSE          (0),
		.USE_READRESPONSE           (0),
		.USE_CLKEN                  (0),
		.AV_BURST_LINEWRAP          (1),
		.AV_BURST_BNDR_ONLY         (1),
		.AV_MAX_PENDING_READS       (1),
		.AV_MAX_PENDING_WRITES      (0),
		.AV_FIX_READ_LATENCY        (0),
		.AV_READ_WAIT_TIME          (1),
		.AV_WRITE_WAIT_TIME         (0),
		.REGISTER_WAITREQUEST       (0),
		.AV_REGISTERINCOMINGSIGNALS (0),
		.VHDL_ID                    (0)
	) mm_slave_bfm_0 (
		.clk                      (clk_clk),                                         //       clk.clk
		.reset                    (rst_controller_reset_out_reset),                  // clk_reset.reset
		.avs_writedata            (mm_interconnect_0_mm_slave_bfm_0_s0_writedata),   //        s0.writedata
		.avs_address              (mm_interconnect_0_mm_slave_bfm_0_s0_address),     //          .address
		.avs_waitrequest          (mm_interconnect_0_mm_slave_bfm_0_s0_waitrequest), //          .waitrequest
		.avs_write                (mm_interconnect_0_mm_slave_bfm_0_s0_write),       //          .write
		.avs_byteenable           (mm_interconnect_0_mm_slave_bfm_0_s0_byteenable),  //          .byteenable
		.avs_begintransfer        (1'b0),                                            // (terminated)
		.avs_beginbursttransfer   (1'b0),                                            // (terminated)
		.avs_burstcount           (3'b001),                                          // (terminated)
		.avs_readdata             (),                                                // (terminated)
		.avs_read                 (1'b0),                                            // (terminated)
		.avs_readdatavalid        (),                                                // (terminated)
		.avs_arbiterlock          (1'b0),                                            // (terminated)
		.avs_lock                 (1'b0),                                            // (terminated)
		.avs_debugaccess          (1'b0),                                            // (terminated)
		.avs_transactionid        (8'b00000000),                                     // (terminated)
		.avs_readid               (),                                                // (terminated)
		.avs_writeid              (),                                                // (terminated)
		.avs_clken                (1'b1),                                            // (terminated)
		.avs_response             (),                                                // (terminated)
		.avs_writeresponserequest (1'b0),                                            // (terminated)
		.avs_writeresponsevalid   (),                                                // (terminated)
		.avs_readresponse         (),                                                // (terminated)
		.avs_writeresponse        ()                                                 // (terminated)
	);

	test_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                        (clk_clk),                                         //                                      clk_0_clk.clk
		.addr_master_0_reset_sink_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                  // addr_master_0_reset_sink_reset_bridge_in_reset.reset
		.addr_master_0_m0_address                             (addr_master_0_m0_address),                        //                               addr_master_0_m0.address
		.addr_master_0_m0_waitrequest                         (addr_master_0_m0_waitrequest),                    //                                               .waitrequest
		.addr_master_0_m0_write                               (addr_master_0_m0_write),                          //                                               .write
		.addr_master_0_m0_writedata                           (addr_master_0_m0_writedata),                      //                                               .writedata
		.mm_slave_bfm_0_s0_address                            (mm_interconnect_0_mm_slave_bfm_0_s0_address),     //                              mm_slave_bfm_0_s0.address
		.mm_slave_bfm_0_s0_write                              (mm_interconnect_0_mm_slave_bfm_0_s0_write),       //                                               .write
		.mm_slave_bfm_0_s0_writedata                          (mm_interconnect_0_mm_slave_bfm_0_s0_writedata),   //                                               .writedata
		.mm_slave_bfm_0_s0_byteenable                         (mm_interconnect_0_mm_slave_bfm_0_s0_byteenable),  //                                               .byteenable
		.mm_slave_bfm_0_s0_waitrequest                        (mm_interconnect_0_mm_slave_bfm_0_s0_waitrequest)  //                                               .waitrequest
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                 // reset_in0.reset
		.clk            (clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

endmodule
